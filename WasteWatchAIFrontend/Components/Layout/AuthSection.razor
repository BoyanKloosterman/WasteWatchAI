@using WasteWatchAIFrontend.Services
@using WasteWatchAIFrontend.Models
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@implements IDisposable
@rendermode InteractiveServer

<div class="auth-section">
    <!-- Debug: isAuthenticated = @isAuthenticated, userEmail = @userEmail -->
    @if (isAuthenticated)
    {
        <span class="user-info">@userEmail</span>
        <button class="btn btn-outline-primary btn-sm logout-btn" @onclick="AuthService.LogoutAsync">
            <i class="fas fa-sign-out-alt"></i>
            <span class="btn-text">Uitloggen</span>
        </button>
    }
    else
    {
        <div class="auth-buttons">
            <a href="/login" class="btn btn-outline-primary btn-sm auth-btn">
                <i class="fas fa-sign-in-alt"></i>
                <span class="btn-text">Inloggen</span>
            </a>
            <a href="/register" class="btn btn-primary btn-sm auth-btn register-btn">
                <i class="fas fa-user-plus"></i>
                <span class="btn-text">Registreren</span>
            </a>
        </div>
    }
</div>

<style>
    .auth-section {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .auth-buttons {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .user-info {
        color: #495057;
        font-size: 14px;
        font-weight: 500;
        padding: 6px 12px;
        background: #e9ecef;
        border-radius: 20px;
        border: 1px solid #ced4da;
    }

    .auth-btn, .logout-btn {
        padding: 6px 16px !important;
        font-size: 13px !important;
        font-weight: 500;
        border-radius: 20px !important;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
        border: 1px solid transparent !important;
    }

    .auth-btn {
        border: 1px solid #6c757d !important;
        background: transparent;
        color: #6c757d;
    }

        .auth-btn:hover {
            background: #6c757d;
            border-color: #6c757d !important;
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

    .register-btn {
        background: #0d6efd !important;
        color: white !important;
        border: 1px solid #0d6efd !important;
    }

        .register-btn:hover {
            background: #0b5ed7 !important;
            border-color: #0a58ca !important;
            color: white !important;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

    .logout-btn {
        background: transparent;
        color: #dc3545;
        border: 1px solid #dc3545 !important;
    }

        .logout-btn:hover {
            background: #dc3545;
            border-color: #dc3545 !important;
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

    .btn-text {
        display: inline;
    }

    @@media (max-width: 768px) {
        .auth-section {
            justify-content: center;
        }

        .auth-buttons {
            justify-content: center;
            gap: 6px;
        }

        .user-info {
            font-size: 12px;
            text-align: center;
            padding: 4px 8px;
        }

        .auth-btn, .logout-btn {
            padding: 4px 12px !important;
            font-size: 12px !important;
        }
    }

    @@media (max-width: 480px) {
        .btn-text {
            display: none;
        }

        .auth-btn, .logout-btn {
            padding: 6px 8px !important;
            border-radius: 50% !important;
            width: 32px;
            height: 32px;
            justify-content: center;
        }
    }
</style>

@code {
    private bool isAuthenticated = false;
    private string userEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();

        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthenticationStatus();
            StateHasChanged();
        }
    }

    private async Task CheckAuthenticationStatus()
    {
        try
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();

            if (isAuthenticated)
            {
                var userInfo = await AuthService.GetUserInfoAsync();
                userEmail = userInfo?.Email ?? string.Empty;
            }
            else
            {
                userEmail = string.Empty;
            }
        }
        catch (Exception)
        {
            isAuthenticated = false;
            userEmail = string.Empty;
        }
    }

    private async void OnAuthenticationStateChanged()
    {
        await InvokeAsync(async () =>
        {
            await CheckAuthenticationStatus();
            StateHasChanged();
        });
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        userEmail = string.Empty;
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
