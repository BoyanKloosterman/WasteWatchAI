@using WasteWatchAIFrontend.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@implements IDisposable
@rendermode InteractiveServer

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">WasteWatchAI</a>
        
        <div class="auth-section">
            @if (isAuthenticated)
            {
                <span class="user-info">@userEmail</span>
                <button class="btn btn-outline-light btn-sm" @onclick="HandleLogout">
                    <i class="fas fa-sign-out-alt"></i> Uitloggen
                </button>
            }
            else
            {
                <a href="/login" class="btn btn-outline-light btn-sm me-2">
                    <i class="fas fa-sign-in-alt"></i> Inloggen
                </a>
                <a href="/register" class="btn btn-light btn-sm">
                    <i class="fas fa-user-plus"></i> Registreren
                </a>
            }
        </div>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="">
                <span class="" aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
                        <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5z" />
                    </svg>
                </span> Dashboard
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="analyse">
                <span class="=" aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bar-chart" viewBox="0 0 16 16">
                        <path d="M4 11H2v3h2zm5-4H7v7h2zm5-5v12h-2V2zm-2-1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM6 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1zm-5 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1z" />
                    </svg>
                </span> Analyse
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="prediction">
                <span class="" aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-graph-up" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M0 0h1v15h15v1H0zm14.817 3.113a.5.5 0 0 1 .07.704l-4.5 5.5a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61 4.15-5.073a.5.5 0 0 1 .704-.07" />
                    </svg>
                </span> Prediction
            </NavLink>
        </div>
      
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="reports">
                <span class="" aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark" viewBox="0 0 16 16">
                        <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5z" />
                    </svg>
                </span> Reports
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="map">
                <span class="" aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-map" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M15.817.113A.5.5 0 0 1 16 .5v14a.5.5 0 0 1-.402.49l-5 1a.5.5 0 0 1-.196 0L5.5 15.01l-4.902.98A.5.5 0 0 1 0 15.5v-14a.5.5 0 0 1 .402-.49l5-1a.5.5 0 0 1 .196 0L10.5.99l4.902-.98a.5.5 0 0 1 .415.103M10 1.91l-4-.8v12.98l4 .8zm1 12.98 4-.8V1.11l-4 .8zm-6-.8V1.11l-4 .8v12.98z" />
                    </svg>
                </span> Map
            </NavLink>
        </div>

    </nav>
</div>

<style>
    .auth-section {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .user-info {
        color: white;
        font-size: 14px;
        margin-right: 10px;
    }

    .btn-sm {
        padding: 4px 12px;
        font-size: 14px;
    }

    .btn-outline-light:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    @@media (max-width: 768px) {
        .auth-section {
            flex-direction: column;
            gap: 5px;
        }
        
        .user-info {
            margin-right: 0;
            font-size: 12px;
        }
    }
</style>

@code {
    private bool isAuthenticated = false;
    private string userEmail = string.Empty;
    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();
        
        // Periodiek controleren van authenticatie status
        timer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await CheckAuthenticationStatus();
                StateHasChanged();
            });
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    private async Task CheckAuthenticationStatus()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        if (isAuthenticated)
        {
            var userInfo = await AuthService.GetUserInfoAsync();
            userEmail = userInfo?.Email ?? string.Empty;
        }
        else
        {
            userEmail = string.Empty;
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        userEmail = string.Empty;
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}