@using WasteWatchAIFrontend.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject ILogger<AuthGuard> Logger
@implements IDisposable

@if (isLoading)
{
    <div class="auth-loading">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Laden...</span>
        </div>
        <p>Authenticatie controleren...</p>
    </div>
}
else if (isAuthenticated)
{
    @ChildContent
}
else
{
    <div class="auth-required">
        <div class="auth-card">
            <i class="fas fa-lock auth-icon"></i>
            <h3>Authenticatie vereist</h3>
            <p>Je moet ingelogd zijn om deze pagina te bekijken.</p>
            <div class="auth-actions">
                <a href="/login" class="btn btn-primary">
                    <i class="fas fa-sign-in-alt"></i> Inloggen
                </a>
                <a href="/register" class="btn btn-outline-primary">
                    <i class="fas fa-user-plus"></i> Account aanmaken
                </a>
            </div>
        </div>
    </div>
}

<style>
    .auth-loading, .auth-required {
        min-height: 60vh;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .auth-loading {
        flex-direction: column;
        gap: 1rem;
    }

    .auth-card {
        background: white;
        padding: 3rem;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        max-width: 400px;
    }

    .auth-icon {
        font-size: 4rem;
        color: #667eea;
        margin-bottom: 1.5rem;
    }

    .auth-card h3 {
        color: #333;
        margin-bottom: 1rem;
    }

    .auth-card p {
        color: #666;
        margin-bottom: 2rem;
    }

    .auth-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: #667eea;
        color: white;
        border: 2px solid #667eea;
    }

    .btn-primary:hover {
        background: #5a6fd8;
        transform: translateY(-2px);
    }

    .btn-outline-primary {
        background: transparent;
        color: #667eea;
        border: 2px solid #667eea;
    }

    .btn-outline-primary:hover {
        background: #667eea;
        color: white;
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private bool isLoading = true;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("AuthGuard initializing");
        
        try
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            Logger.LogInformation("AuthGuard authentication check completed. Authenticated: {IsAuthenticated}", isAuthenticated);
            
            // Log current page URL
            Logger.LogDebug("Current page URL: {Url}", Navigation.Uri);
            
            // Get and log token info
            var token = await AuthService.GetTokenAsync();
            Logger.LogDebug("Token present: {HasToken}, Length: {TokenLength}", 
                !string.IsNullOrEmpty(token), 
                !string.IsNullOrEmpty(token) ? token.Length : 0);
            
            // Get and log user info
            var userInfo = await AuthService.GetUserInfoAsync();
            Logger.LogDebug("User info: {UserInfo}", 
                userInfo != null ? $"Email: {userInfo.Email}, Authenticated: {userInfo.IsAuthenticated}" : "None");
            
            // Subscribe to authentication state changes
            AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
            Logger.LogDebug("Subscribed to authentication state changes");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during AuthGuard initialization");
            isAuthenticated = false;
        }
        finally
        {
            isLoading = false;
            Logger.LogDebug("AuthGuard loading completed");
        }
    }

    private async void OnAuthenticationStateChanged()
    {
        Logger.LogDebug("Authentication state changed event received");
        
        await InvokeAsync(async () =>
        {
            try
            {
                isAuthenticated = await AuthService.IsAuthenticatedAsync();
                Logger.LogInformation("Authentication state updated. New state: {IsAuthenticated}", isAuthenticated);
                
                // Log token status on state change
                var token = await AuthService.GetTokenAsync();
                Logger.LogDebug("Token after state change - Present: {HasToken}, Length: {TokenLength}", 
                    !string.IsNullOrEmpty(token), 
                    !string.IsNullOrEmpty(token) ? token.Length : 0);
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error during authentication state change");
                isAuthenticated = false;
                StateHasChanged();
            }
        });
    }

    public void Dispose()
    {
        Logger.LogDebug("AuthGuard disposing");
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
