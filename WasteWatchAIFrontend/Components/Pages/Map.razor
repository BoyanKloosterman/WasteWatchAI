@page "/map"
@using WasteWatchAIFrontend.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer



<div id="wasteMap" style="height: 250px; width: 100%; border-radius: 0.375rem;"></div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin="" />

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>

<script src="https://unpkg.com/leaflet.heat@0.2.0/dist/leaflet-heat.js"></script>

<script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css">


<style>

    .leaflet-popup-content-wrapper {
        border-radius: 8px;
    }

    .custom-popup {
        font-family: inherit;
    }

        .custom-popup h6 {
            margin-bottom: 8px;
            color: #634AFF;
            font-weight: bold;
        }

        .custom-popup .badge {
            font-size: 0.75em;
        }
</style>


@code
{
    private IJSObjectReference? _mapModule;
    private bool _mapInitialized = false;


    protected override async Task OnInitializedAsync()
    {
       //  await LoadDummyTrashData();
       // CheckForHighPriorityAlerts();

        await UpdateMap();



        // refreshTimer = new System.Threading.Timer(async _ =>
        // {
        //     await InvokeAsync(async () =>
        //     {
        //         await LoadDummyTrashData();
        //         CheckForHighPriorityAlerts();
        //         await UpdateChart();
        //         await UpdateMap();
        //         StateHasChanged();
        //     });
        // }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));

    }





    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    // if (firstRender)
    // {
        
    //     try
    //     {
    //         _chartModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
    //             "import", "./chartInterop.js");
    // await UpdateChart();
    // await InitializeMap();
    // }
    //     catch { }
    // }
    // }





    private async Task UpdateMap()
    {
        if (!_mapInitialized) return;

        try
        {
            var filteredData = GetFilteredData();

            var mapData = filteredData.Select(item => new
            {
                lat = (double)item.Latitude,
                lng = (double)item.Longitude,
                litterType = item.LitterType,
                timestamp = item.Timestamp.ToString("dd-MM-yyyy HH:mm"),
                location = GetLocationName(item.Latitude, item.Longitude)
            }).ToList();

            var jsonData = JsonSerializer.Serialize(mapData);
            await JSRuntime.InvokeVoidAsync("updateMapMarkers", jsonData);
        }
        catch { }
    }


}



<script>
        let map;
        let markersLayer;

        const litterTypeColors = {
            'Plastic': '#e74c3c',
            'Papier': '#3498db',
            'Glas': '#2ecc71',
            'Organisch': '#f39c12'
        };

        window.initializeMap = function() {
            try {
                map = L.map('wasteMap').setView([51.5861, 4.7767], 13);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);

                markersLayer = L.layerGroup().addTo(map);
            } catch {}
        };

        window.updateMapMarkers = function(jsonData) {
            try {
                const trashData = JSON.parse(jsonData);

                if (!map || !markersLayer) {
                    return;
                }

                if (!Array.isArray(trashData) || trashData.length === 0) {
                    return;
                }

                markersLayer.clearLayers();

                trashData.forEach((item, index) => {
                    if (typeof item.lat !== 'number' || typeof item.lng !== 'number') {
                        return;
                    }

                    const color = litterTypeColors[item.litterType] || '#95a5a6';

                    const lat = item.lat + (Math.random() - 0.5) * 0.00002;
                    const lng = item.lng + (Math.random() - 0.5) * 0.00002;

                    const marker = L.circleMarker([lat, lng], {
                        radius: 5,
                        fillColor: color,
                        color: '#fff',
                        weight: 1,
                        opacity: 1,
                        fillOpacity: 0.8
                    });

                    const popupContent = `
                        <div class="custom-popup">
                            <h6>${item.location || 'Onbekende locatie'}</h6>
                            <p><strong>Type:</strong> <span style="color:${color}">${item.litterType || 'Onbekend'}</span></p>
                            <p><strong>Tijd:</strong> ${item.timestamp || 'Onbekend'}</p>
                            <p><strong>Coördinaten:</strong> ${item.lat.toFixed(6)}, ${item.lng.toFixed(6)}</p>
                        </div>
                    `;

                    marker.bindPopup(popupContent);
                    markersLayer.addLayer(marker);
                });

                if (trashData.length > 1000) {
                    map.setZoom(14);
                }
            } catch {}
        };
</script>