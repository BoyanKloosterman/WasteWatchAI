@page "/dashboard"
@using WasteWatchAIFrontend.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

@if (showAlert)
{
    <div class="alert alert-danger alert-dismissible fade show position-fixed top-0 end-0 m-3" style="z-index: 1000;" role="alert">
        <strong>Waarschuwing!</strong> @alertMessage
        <button type="button" class="btn-close" @onclick="() => showAlert = false"></button>
    </div>
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 fw-bold">
            Afvalbeheer Dashboard
        </h1>
        <div class="text-muted small">
            Laatste update: @DateTime.Now.ToString("HH:mm")
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-6 col-lg-4 mb-4">
            <div class="card h-100 shadow-sm" style="background-color: #F7F6FF; border: none;">
                <div class="card-body">
                    <h5 class="card-title">@GetTotalLabel()</h5>
                    <p class="card-text display-6 fw-bold">@GetFilteredData().Count</p>
                    <p class="text-muted small mb-0">@GetTotalSubLabel()</p>
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-lg-4 mb-4">
            <div class="card h-100 shadow-sm" style="background-color: #F7F6FF; border: none;">
                <div class="card-body">
                    <h5 class="card-title">Top Afvaltypes</h5>
                    @if (GetTopLitterTypes().Any())
                    {
                        @foreach (var litterType in GetTopLitterTypes())
                        {
                            <p class="card-text fw-bold mb-1">@litterType.LitterType</p>
                            <p class="text-muted small mb-2">@litterType.Percentage.ToString("F1")%</p>
                        }
                    }
                    else
                    {
                        <p class="card-text fw-bold">Geen data</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-sm-6 col-lg-4 mb-4">
            <div class="card h-100 shadow-sm" style="background-color: #F7F6FF; border: none;">
                <div class="card-body">
                    <h5 class="card-title">Top Hotspots</h5>
                    @if (GetTopLocations().Any())
                    {
                        @foreach (var location in GetTopLocations())
                        {
                            <p class="card-text fw-bold mb-1">@location.LocationName</p>
                            <p class="text-muted small mb-2">@location.Percentage.ToString("F1")%</p>
                        }
                    }
                    else
                    {
                        <p class="card-text fw-bold">Geen data</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-sm-6 col-md-4">
                    <label class="form-label fw-bold">Afvaltype</label>
                    <select class="form-select" @bind="selectedLitterType" @bind:after="OnFilterChanged">
                        <option value="">Alle types</option>
                        <option value="Plastic">Plastic</option>
                        <option value="Papier">Papier</option>
                        <option value="Glas">Glas</option>
                        <option value="Organisch">Organisch</option>
                    </select>
                </div>

                <div class="col-sm-6 col-md-4">
                    <label class="form-label fw-bold">Locatie</label>
                    <select class="form-select" @bind="selectedLocation" @bind:after="OnFilterChanged">
                        <option value="">Alle locaties</option>
                        <option value="Grote Markt Breda">Grote Markt Breda</option>
                        <option value="Centraal Station Breda">Centraal Station Breda</option>
                        <option value="Valkenberg Park">Valkenberg Park</option>
                        <option value="Haagdijk">Haagdijk</option>
                        <option value="Chassé Park">Chassé Park</option>
                        <option value="Chasséveld">Chasséveld</option>
                    </select>
                </div>

                <div class="col-sm-6 col-md-4">
                    <label class="form-label fw-bold">Datum</label>
                    <select class="form-select" @bind="selectedDateRange" @bind:after="OnFilterChanged">
                        <option value="">Alle periodes</option>
                        <option value="Vandaag">Vandaag</option>
                        <option value="Deze week">Deze week</option>
                        <option value="Deze maand">Deze maand</option>
                        <option value="Dit jaar">Dit jaar</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title fw-bold mb-4">Actieve Realtime waarschuwingen</h5>

                    @if (GetLocationAlerts().Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-borderless table-custom mb-0">
                                <thead>
                                    <tr class="text-muted small">
                                        <th>Locatie</th>
                                        <th>Status</th>
                                        <th>Afgelopen uur</th>
                                        <th>Afgelopen 24u</th>
                                        <th>Totaal</th>
                                        <th>Laatste melding</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var alert in GetLocationAlerts().OrderByDescending(a => a.Priority).ThenByDescending(a => a.LastAlert))
                                    {
                                        <tr>
                                            <td class="fw-bold">@alert.LocationName</td>
                                            <td>
                                                @if (alert.Priority == "Hoog")
                                                {
                                                    <span class="badge bg-danger">@alert.Priority</span>
                                                }
                                                else if (alert.Priority == "Gemiddeld")
                                                {
                                                    <span class="badge bg-warning text-dark">@alert.Priority</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">@alert.Priority</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="fw-bold">@alert.CountLastHour</span>
                                                @if (alert.CountLastHour > 0)
                                                {
                                                    <small class="text-muted">melding@(alert.CountLastHour != 1 ? "en" : "")</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="fw-bold">@alert.CountLast24Hours</span>
                                                @if (alert.CountLast24Hours > 0)
                                                {
                                                    <small class="text-muted">melding@(alert.CountLast24Hours != 1 ? "en" : "")</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="fw-bold">@alert.TotalCount</span>
                                                <small class="text-muted">totaal</small>
                                            </td>
                                            <td class="text-muted small">
                                                @if (alert.LastAlert.HasValue)
                                                {
                                                    @alert.LastAlert.Value.ToString("HH:mm")
                                                }
                                                else
                                                {
                                                    <span>-</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="mt-3 text-muted small">
                            <div class="d-flex gap-4">
                                <div><span class="badge bg-danger me-1"></span>Hoog: 3+ meldingen afgelopen uur</div>
                                <div><span class="badge bg-warning me-1"></span>Gemiddeld: 1-2 meldingen afgelopen uur</div>
                                <div><span class="badge bg-success me-1"></span>Laag: geen recente meldingen</div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <div>Geen actieve waarschuwingen</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-4 mb-md-0">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title fw-bold mb-4">Verdeling afvaltypes</h5>
                    <div class="chart-container" style="position: relative; height:250px; width:100%">
                        <canvas id="litterTypeChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title fw-bold mb-4">Interactieve kaart</h5>
                    <div class="bg-light rounded p-4 d-flex justify-content-center align-items-center" style="height: 250px;">
                        <div class="text-center text-muted">
                            <div>Kaart placeholder</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .text-purple {
        color: #634AFF;
    }

    .btn-purple {
        background-color: #634AFF;
        color: white;
    }

        .btn-purple:hover {
            background-color: #5538e0;
            color: white;
        }

    .border-purple {
        border-color: #634AFF !important;
    }

    .table-custom tr:not(:last-child) td {
        border-bottom: 1px solid #dee2e6;
    }

    .table-custom th {
        border-bottom: 2px solid #dee2e6;
        font-weight: 600;
    }
</style>

@code {
    private List<TrashItem> trashItems = new();
    private List<TrashItem> filteredTrashItems = new();
    private bool filtersApplied = false;

    private string selectedLitterType = "";
    private string selectedLocation = "";
    private string selectedDateRange = "";

    public class LocationAlert
    {
        public string LocationName { get; set; } = string.Empty;
        public int CountLastHour { get; set; }
        public int CountLast24Hours { get; set; }
        public int TotalCount { get; set; }
        public DateTime? LastAlert { get; set; }
        public string Priority { get; set; } = "Laag";
    }

    private System.Threading.Timer? refreshTimer;
    private bool showAlert = false;
    private string alertMessage = string.Empty;
    private List<string> notifiedHighAlerts = new();
    private IJSObjectReference? _chartModule;
    private IJSObjectReference? _chartInstance;

    protected override async Task OnInitializedAsync()
    {
        await LoadDummyTrashData();
        CheckForHighPriorityAlerts();

        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadDummyTrashData();
                CheckForHighPriorityAlerts();
                await UpdateChart();
                StateHasChanged();
            });
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _chartModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./chartInterop.js");
            await UpdateChart();
        }
    }

    private async Task UpdateChart()
    {
        try
        {
            if (_chartModule is not null)
            {
                if (_chartInstance is not null)
                {
                    await _chartInstance.InvokeVoidAsync("destroy");
                    await _chartInstance.DisposeAsync();
                    _chartInstance = null;
                }

                var counts = GetLitterTypeCounts();
                if (counts.Any())
                {
                    _chartInstance = await _chartModule.InvokeAsync<IJSObjectReference>(
                        "setupLitterTypeChart",
                        counts.Keys.ToArray(),
                        counts.Values.ToArray());
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating chart: {ex.Message}");
        }
    }

    private Dictionary<string, int> GetLitterTypeCounts()
    {
        var dataToUse = GetFilteredData();

        if (!dataToUse.Any())
            return new Dictionary<string, int>();

        return dataToUse
            .GroupBy(item => item.LitterType)
            .OrderByDescending(group => group.Count())
            .ToDictionary(
                group => group.Key,
                group => group.Count()
            );
    }

    private List<TrashItem> GetFilteredData()
    {
        return filtersApplied ? filteredTrashItems : trashItems;
    }

    private string GetTotalLabel()
    {
        if (!filtersApplied || string.IsNullOrEmpty(selectedDateRange))
            return "Totaal afval";

        return selectedDateRange switch
        {
            "Vandaag" => "Afval vandaag",
            "Deze week" => "Afval deze week",
            "Deze maand" => "Afval deze maand",
            "Dit jaar" => "Afval dit jaar",
            _ => "Totaal afval"
        };
    }

    private string GetTotalSubLabel()
    {
        if (!filtersApplied || string.IsNullOrEmpty(selectedDateRange))
            return "Gedetecteerd in totaal";

        return selectedDateRange switch
        {
            "Vandaag" => "Gedetecteerd vandaag",
            "Deze week" => "Gedetecteerd deze week",
            "Deze maand" => "Gedetecteerd deze maand",
            "Dit jaar" => "Gedetecteerd dit jaar",
            _ => "Gedetecteerd in totaal"
        };
    }

    private int GetLast30DaysCount()
    {
        var now = DateTime.UtcNow;
        var dertigDagenGeleden = now.AddDays(-30);

        var baseData = GetFilteredData();

        var last30DaysData = trashItems.AsQueryable();

        if (!string.IsNullOrEmpty(selectedLocation))
        {
            last30DaysData = last30DaysData.Where(item =>
                GetLocationName(item.Latitude, item.Longitude).Equals(selectedLocation, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedLitterType))
        {
            last30DaysData = last30DaysData.Where(item =>
                item.LitterType.Equals(selectedLitterType, StringComparison.OrdinalIgnoreCase));
        }

        return last30DaysData
            .Where(item => item.Timestamp >= dertigDagenGeleden && item.Timestamp <= now)
            .Count();
    }

    private void CheckForHighPriorityAlerts()
    {
        var highAlerts = GetLocationAlerts()
            .Where(a => a.Priority == "Hoog" && !notifiedHighAlerts.Contains(a.LocationName))
            .ToList();

        if (highAlerts.Any())
        {
            foreach (var alert in highAlerts)
            {
                notifiedHighAlerts.Add(alert.LocationName);
            }

            var locations = string.Join(", ", highAlerts.Select(a => a.LocationName));
            alertMessage = $"Hoog risico op locatie(s): {locations}";
            showAlert = true;

            Task.Delay(60000).ContinueWith(_ =>
            {
                InvokeAsync(() =>
                {
                    showAlert = false;
                    StateHasChanged();
                });
            });
        }
    }

    public async void Dispose()
    {
        refreshTimer?.Dispose();

        try
        {
            if (_chartInstance is not null)
            {
                await _chartInstance.InvokeVoidAsync("destroy");
                await _chartInstance.DisposeAsync();
            }

            if (_chartModule is not null)
            {
                await _chartModule.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during disposal: {ex.Message}");
        }
    }

    private async Task LoadDummyTrashData()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("WasteWatchAPI");
            var response = await httpClient.GetAsync("api/trashitems/dummy");
            if (response.IsSuccessStatusCode)
            {
                trashItems = await response.Content.ReadFromJsonAsync<List<TrashItem>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trash data: {ex.Message}");
        }
    }

    private async Task OnFilterChanged()
    {
        await ApplyFilters();
    }

    private async Task ApplyFilters()
    {
        filteredTrashItems = trashItems.AsQueryable().ToList();

        if (!string.IsNullOrEmpty(selectedLitterType))
        {
            filteredTrashItems = filteredTrashItems
                .Where(item => item.LitterType.Equals(selectedLitterType, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (!string.IsNullOrEmpty(selectedLocation))
        {
            filteredTrashItems = filteredTrashItems
                .Where(item => GetLocationName(item.Latitude, item.Longitude).Equals(selectedLocation, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (!string.IsNullOrEmpty(selectedDateRange))
        {
            var now = DateTime.Now;
            DateTime startDate = now;
            DateTime endDate = now;

            switch (selectedDateRange)
            {
                case "Vandaag":
                    startDate = now.Date;
                    endDate = now.Date.AddDays(1).AddTicks(-1);
                    break;
                case "Deze week":
                    startDate = now.AddDays(-(int)now.DayOfWeek).Date;
                    endDate = startDate.AddDays(7).AddTicks(-1);
                    break;
                case "Deze maand":
                    startDate = new DateTime(now.Year, now.Month, 1);
                    endDate = startDate.AddMonths(1).AddTicks(-1);
                    break;
                case "Dit jaar":
                    startDate = new DateTime(now.Year, 1, 1);
                    endDate = startDate.AddYears(1).AddTicks(-1);
                    break;
            }

            filteredTrashItems = filteredTrashItems
                .Where(item => item.Timestamp >= startDate && item.Timestamp <= endDate)
                .ToList();
        }

        filtersApplied = !string.IsNullOrEmpty(selectedLitterType) ||
                        !string.IsNullOrEmpty(selectedLocation) ||
                        !string.IsNullOrEmpty(selectedDateRange);

        await UpdateChart();

        Console.WriteLine($"Filters toegepast - Totaal aantal items: {filteredTrashItems.Count}, Filters actief: {filtersApplied}");
    }

    private List<LocationAlert> GetLocationAlerts()
    {
        var dataToUse = GetFilteredData();

        if (!dataToUse.Any())
            return new List<LocationAlert>();

        var now = DateTime.Now;
        var oneHourAgo = now.AddHours(-1);
        var twentyFourHoursAgo = now.AddHours(-24);

        var locationGroups = dataToUse
            .GroupBy(item => GetLocationName(item.Latitude, item.Longitude))
            .ToList();

        var alerts = new List<LocationAlert>();

        foreach (var group in locationGroups)
        {
            var locationItems = group.ToList();

            var lastHourItems = locationItems.Where(item =>
                item.Timestamp >= oneHourAgo &&
                item.Timestamp <= now).ToList();

            var last24HourItems = locationItems.Where(item =>
                item.Timestamp >= twentyFourHoursAgo &&
                item.Timestamp <= now).ToList();

            var alert = new LocationAlert
                {
                    LocationName = group.Key,
                    CountLastHour = lastHourItems.Count,
                    CountLast24Hours = last24HourItems.Count,
                    TotalCount = locationItems.Count,
                    LastAlert = locationItems.Where(item => item.Timestamp <= now).Any() ?
                                       locationItems.Where(item => item.Timestamp <= now).Max(item => item.Timestamp) : null
                };

            if (alert.CountLastHour >= 3)
            {
                alert.Priority = "Hoog";
            }
            else if (alert.CountLastHour >= 1)
            {
                alert.Priority = "Gemiddeld";
            }
            else
            {
                alert.Priority = "Laag";
            }

            alerts.Add(alert);
        }

        return alerts;
    }

    private List<(string LitterType, double Percentage)> GetTopLitterTypes(int topCount = 2)
    {
        var dataToUse = GetFilteredData();

        if (!dataToUse.Any())
            return new List<(string LitterType, double Percentage)>();

        var totalCount = dataToUse.Count;

        var litterTypeCounts = dataToUse
            .GroupBy(item => item.LitterType)
            .Select(group => new
            {
                LitterType = group.Key,
                Count = group.Count(),
                Percentage = (double)group.Count() / totalCount * 100
            })
            .OrderByDescending(x => x.Count)
            .Take(topCount)
            .Select(x => (x.LitterType, x.Percentage))
            .ToList();

        return litterTypeCounts;
    }

    private List<(string LocationName, double Percentage)> GetTopLocations(int topCount = 2)
    {
        var dataToUse = GetFilteredData();

        if (!dataToUse.Any())
            return new List<(string LocationName, double Percentage)>();

        var totalCount = dataToUse.Count;

        var locationCounts = dataToUse
            .GroupBy(item => GetLocationName(item.Latitude, item.Longitude))
            .Select(group => new
            {
                LocationName = group.Key,
                Count = group.Count(),
                Percentage = (double)group.Count() / totalCount * 100
            })
            .OrderByDescending(x => x.Count)
            .Take(topCount)
            .Select(x => (x.LocationName, x.Percentage))
            .ToList();

        return locationCounts;
    }

    private string GetLocationName(float latitude, float longitude)
    {
        if (latitude >= 51.5890 && latitude <= 51.5900 && longitude >= 4.7750 && longitude <= 4.7765)
            return "Grote Markt Breda";
        if (latitude >= 51.5953 && latitude <= 51.5963 && longitude >= 4.7787 && longitude <= 4.7797)
            return "Centraal Station Breda";
        if (latitude >= 51.5929 && latitude <= 51.5939 && longitude >= 4.7791 && longitude <= 4.7801)
            return "Valkenberg Park";
        if (latitude >= 51.5920 && latitude <= 51.5925 && longitude >= 4.7685 && longitude <= 4.7695)
            return "Haagdijk";
        if (latitude >= 51.5860 && latitude <= 51.5866 && longitude >= 4.7848 && longitude <= 4.7856)
            return "Chassé Park";
        if (latitude >= 51.5890 && latitude <= 51.5902 && longitude >= 4.7750 && longitude <= 4.7766)
            return "Chasséveld";
        var random = new Random((int)(latitude * 1000 + longitude * 1000));
        var locations = new[] { "Stadspark", "Marktplein", "Winkelcentrum", "Sportpark", "Industrieterrein" };
        return locations[random.Next(locations.Length)];
    }
}