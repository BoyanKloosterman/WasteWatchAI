@page "/login"
@using WasteWatchAIFrontend.Models
@using WasteWatchAIFrontend.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Inloggen - WasteWatch AI</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>Welkom terug</h2>
            <p>Log in op je WasteWatch AI account</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-circle"></i>
                    @errorMessage
                </div>
            }

            <div class="form-group">
                <label for="email">Email adres</label>
                <InputText @bind-Value="loginModel.Email" class="form-control" id="email" placeholder="je@email.com" />
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password">Wachtwoord</label>
                <div class="password-input-container">
                    <InputText @bind-Value="loginModel.Password" 
                              type="@(showPassword ? "text" : "password")" 
                              class="form-control" 
                              id="password" 
                              placeholder="Je wachtwoord" />
                    <button type="button" class="password-toggle" @onclick="TogglePasswordVisibility">
                        <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary btn-block" disabled="@isLoading">
                @if (isLoading)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Bezig met inloggen...</span>
                }
                else
                {
                    <i class="fas fa-sign-in-alt"></i>
                    <span>Inloggen</span>
                }
            </button>
        </EditForm>

        <div class="login-footer">
            <p>Nog geen account? <a href="/register" class="register-link">Registreer hier</a></p>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        padding: 40px;
        width: 100%;
        max-width: 400px;
        animation: slideUp 0.5s ease-out;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .login-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .login-header h2 {
        color: #333;
        margin-bottom: 10px;
        font-weight: 600;
    }

    .login-header p {
        color: #666;
        margin: 0;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s ease;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .password-input-container {
        position: relative;
    }

    .password-toggle {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        font-size: 16px;
        padding: 4px;
    }

    .password-toggle:hover {
        color: #333;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
    }

    .btn-primary:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .btn-block {
        width: 100%;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    .login-footer {
        text-align: center;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e1e5e9;
    }

    .login-footer p {
        color: #666;
        margin: 0;
    }

    .register-link {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
    }

    .register-link:hover {
        text-decoration: underline;
    }

    .text-danger {
        color: #dc3545;
        font-size: 14px;
        margin-top: 4px;
    }

    .fa-spinner {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>

@code {
    private LoginRequest loginModel = new();
    private bool isLoading = false;
    private bool showPassword = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var success = await AuthService.LoginAsync(loginModel);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Succesvol ingelogd!");
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Ongeldige email of wachtwoord. Probeer het opnieuw.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Er is een fout opgetreden. Probeer het later opnieuw.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
}
