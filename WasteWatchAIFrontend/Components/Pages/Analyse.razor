@page "/analyse"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using WasteWatchAIFrontend.Models
@using System.Text.Json.Serialization;
@using System.Text.Json;
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@code {

    // State variables
    private List<TrashItem> trashItems = new();
    private List<LocationChartData> locationChartData = new();
    private List<FrequencyDataItem> frequencyData = new();
    private bool isLoading = true;
    private string selectedPeriod = string.Empty;
    private string selectedLocation = string.Empty;
    private string selectedCategory = string.Empty;
    private CorrelationData? correlationData;
    private bool isLoadingCorrelation = false;
    private string correlationError = string.Empty;
    private bool useDummyData = false;
    private bool chartsNeedUpdate = false;



    // Define color mapping for waste types
    private readonly Dictionary<string, string> wasteTypeColors = new()
    {
        { "Plastic", "#e74c3c" },      // Red
        { "Papier", "#3498db" },       // Blue
        { "Organisch", "#2ecc71" },    // Green
        { "Glas", "#f39c12" },         // Orange
    };

    protected override async Task OnInitializedAsync()
    {
        if (useDummyData)
            await LoadDummyTrashData();
        else
            await LoadRealTrashData();

        await ProcessData();
        await LoadCorrelationData();
    }


    private async Task LoadDummyTrashData()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("WasteWatchAPI");
            var response = await httpClient.GetAsync("api/trashitems/dummy");
            if (response.IsSuccessStatusCode)
            {
                trashItems = await response.Content.ReadFromJsonAsync<List<TrashItem>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trash data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            await ProcessData();
            chartsNeedUpdate = true;
            StateHasChanged();
        }
    }


    private async Task LoadRealTrashData()
    {
        isLoading = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("WasteWatchAPI");
            var response = await httpClient.GetAsync("api/trashitems/trash");

            if (response.IsSuccessStatusCode)
            {
                trashItems = await response.Content.ReadFromJsonAsync<List<TrashItem>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading real trash data: {ex.Message}");
            trashItems = new();
        }
        finally
        {
            isLoading = false;
            await ProcessData();
            StateHasChanged();
            chartsNeedUpdate = true;
        }
    }

    private async Task ToggleDataMode()
    {
        isLoading = true;
        StateHasChanged();

        if (useDummyData)
            await LoadDummyTrashData();
        else
            await LoadRealTrashData();

        await LoadCorrelationData();
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isLoading && (firstRender || chartsNeedUpdate))
        {
            await JS.InvokeVoidAsync("eval", @"
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=""tooltip""]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        ");

            await InitializeCharts();
            chartsNeedUpdate = false; // Reset de flag
        }
    }


    private async Task InitializeCharts()
    {
        await InitializeTypeDistributionChart();
        await InitializeFrequencyChart();
    }

    private async Task InitializeTypeDistributionChart()
    {
        if (!locationChartData.Any()) return;

        var locations = locationChartData.Select(l => l.LocationName).ToArray();
        var wasteTypes = GetAllWasteTypes();

        var datasets = wasteTypes.Select(wasteType => new
        {
            label = wasteType,
            data = locationChartData.Select(loc => loc.TypeCounts.GetValueOrDefault(wasteType, 0)).ToArray(),
            backgroundColor = wasteTypeColors.GetValueOrDefault(wasteType, "#95a5a6"),
            borderColor = wasteTypeColors.GetValueOrDefault(wasteType, "#95a5a6"),
            borderWidth = 1
        }).ToArray();

        var chartData = new
        {
            labels = locations,
            datasets = datasets
        };

        await JS.InvokeVoidAsync("initializeTypeDistributionChart", chartData);
    }

    private async Task InitializeFrequencyChart()
    {
        if (!frequencyData.Any()) return;

        var chartData = new
        {
            labels = frequencyData.Select(f => f.Time).ToArray(),
            datasets = new[]
            {
                new
                {
                    label = "Detecties",
                    data = frequencyData.Select(f => f.Value).ToArray(),
                    borderColor = "#4299e1",
                    backgroundColor = "rgba(66, 153, 225, 0.3)",
                    fill = true,
                    tension = 0.4,
                    pointBackgroundColor = "#4299e1",
                    pointBorderColor = "#ffffff",
                    pointBorderWidth = 2,
                    pointRadius = 4
                }
            }
        };

        await JS.InvokeVoidAsync("initializeFrequencyChart", chartData);
    }

    private async Task ProcessData()
    {
        if (!trashItems.Any()) return;

        // Process location-based chart data
        var locationGroups = trashItems
            .GroupBy(item => GetLocationName(item.Latitude, item.Longitude))
            .Select(group => new LocationChartData
                {
                    LocationName = group.Key,
                    TypeCounts = group.GroupBy(item => item.LitterType)
                                                                                                                                                                                                                                                                                                                                                                                                                                                             .ToDictionary(typeGroup => typeGroup.Key, typeGroup => typeGroup.Count()),
                    TotalCount = group.Count()
                })
            .OrderByDescending(loc => loc.TotalCount)
            .Take(5) // Show top 5 locations
            .ToList();

        locationChartData = locationGroups;

        // Process frequency data - count by hour of day
        var hourlyFrequency = new List<FrequencyDataItem>();

        // Create hourly buckets from 06:00 to 22:00
        for (int hour = 6; hour <= 22; hour++)
        {
            var count = trashItems.Count(item => item.Timestamp.Hour == hour);
            hourlyFrequency.Add(new FrequencyDataItem
                {
                    Label = $"{hour:D2}:00",
                    Time = $"{hour:D2}:00",
                    Value = count
                });
        }

        frequencyData = hourlyFrequency;
    }

    private string GetLocationName(float latitude, float longitude)
    {
        // Breda: Grote Markt (updated range)
        if (latitude >= 51.5890 && latitude <= 51.5900 && longitude >= 4.7750 && longitude <= 4.7765)
            return "Grote Markt Breda";

        // Breda: Centraal Station
        if (latitude >= 51.5953 && latitude <= 51.5963 && longitude >= 4.7787 && longitude <= 4.7797)
            return "Centraal Station Breda";

        // Breda: Valkenberg Park
        if (latitude >= 51.5929 && latitude <= 51.5939 && longitude >= 4.7791 && longitude <= 4.7801)
            return "Valkenberg Park";

        // Breda: Haagdijk (updated range)
        if (latitude >= 51.5920 && latitude <= 51.5925 && longitude >= 4.7685 && longitude <= 4.7695)
            return "Haagdijk";

        // Breda: Chassé Park (new)
        if (latitude >= 51.5860 && latitude <= 51.5866 && longitude >= 4.7848 && longitude <= 4.7856)
            return "Chassé Park";

        // Breda: Chasséveld (existing)
        if (latitude >= 51.5890 && latitude <= 51.5902 && longitude >= 4.7750 && longitude <= 4.7766)
            return "Chasséveld";

        // Default locations for other coordinates
        var random = new Random((int)(latitude * 1000 + longitude * 1000));
        var locations = new[] { "Stadspark", "Marktplein", "Winkelcentrum", "Sportpark", "Industrieterrein" };
        return locations[random.Next(locations.Length)];
    }

    private string GetDayAbbreviation(DayOfWeek day)
    {
        return day switch
        {
            DayOfWeek.Monday => "Ma",
            DayOfWeek.Tuesday => "Di",
            DayOfWeek.Wednesday => "Wo",
            DayOfWeek.Thursday => "Do",
            DayOfWeek.Friday => "Vr",
            DayOfWeek.Saturday => "Za",
            DayOfWeek.Sunday => "Zo",
            _ => day.ToString()
        };
    }

    private int GetDayOrder(string dayAbbr)
    {
        return dayAbbr switch
        {
            "Ma" => 1,
            "Di" => 2,
            "Wo" => 3,
            "Do" => 4,
            "Vr" => 5,
            "Za" => 6,
            "Zo" => 7,
            _ => 8
        };
    }

    private string GetFilterSummary()
    {
        var parts = new List<string>();

        // Periode
        if (!string.IsNullOrEmpty(selectedPeriod))
        {
            parts.Add(selectedPeriod switch
            {
                "week" => "de afgelopen week",
                "month" => "de afgelopen maand",
                "year" => "het afgelopen jaar",
                _ => ""
            });
        }
        else
        {
            parts.Add("de volledige periode");
        }

        // Locatie
        if (!string.IsNullOrEmpty(selectedLocation))
            parts.Add($"locatie: {selectedLocation}");
        else
            parts.Add("alle locaties");

        // Categorie
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            var cat = selectedCategory switch
            {
                "plastic" => "Plastic",
                "papier" => "Papier",
                "gft" => "GFT/Organisch",
                "glas" => "Glas",
                _ => selectedCategory
            };
            parts.Add($"categorie: {cat}");
        }
        else
        {
            parts.Add("alle categorieën");
        }

        return string.Join(", ", parts);
    }

    private async Task ApplyFilters()
    {
        var filteredItems = trashItems.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedPeriod))
        {
            var now = DateTime.Now;
            filteredItems = selectedPeriod switch
            {
                "week" => filteredItems.Where(item => item.Timestamp >= now.AddDays(-7)),
                "month" => filteredItems.Where(item => item.Timestamp >= now.AddMonths(-1)),
                "year" => filteredItems.Where(item => item.Timestamp >= now.AddYears(-1)),
                _ => filteredItems
            };
        }

        if (!string.IsNullOrEmpty(selectedCategory))
        {
            var categoryMap = new Dictionary<string, string>
        {
            { "plastic", "Plastic" },
            { "papier", "Papier" },
            { "gft", "Organisch" },
            { "glas", "Glas" }
        };

            if (categoryMap.TryGetValue(selectedCategory, out var actualCategory))
            {
                filteredItems = filteredItems.Where(item =>
                    item.LitterType.Equals(actualCategory, StringComparison.OrdinalIgnoreCase));
            }
        }

        if (!string.IsNullOrEmpty(selectedLocation))
        {
            filteredItems = filteredItems.Where(item =>
                GetLocationName(item.Latitude, item.Longitude).Equals(selectedLocation, StringComparison.OrdinalIgnoreCase));
        }

        var originalItems = trashItems;
        trashItems = filteredItems.ToList();

        await ProcessData();
        trashItems = originalItems;

        StateHasChanged();
        await InitializeCharts();
    }

    // New method for handling filter changes
    private async Task OnFilterChanged()
    {
        await ApplyFilters();
    }

    // New method for resetting filters
    private async Task ResetFilters()
    {
        selectedPeriod = string.Empty;
        selectedLocation = string.Empty;
        selectedCategory = string.Empty;

        await ApplyFilters();
    }

    // Helper method to check if any filters are active
    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(selectedPeriod) ||
               !string.IsNullOrEmpty(selectedLocation) ||
               !string.IsNullOrEmpty(selectedCategory);
    }

    private int GetMaxValueForLocation(LocationChartData location)
    {
        return location.TypeCounts.Values.DefaultIfEmpty(0).Max();
    }

    private List<string> GetAllWasteTypes()
    {
        return locationChartData
            .SelectMany(loc => loc.TypeCounts.Keys)
            .Distinct()
            .OrderBy(type => type)
            .ToList();
    }

    private async Task LoadCorrelationData()
    {
        isLoadingCorrelation = true;
        correlationError = string.Empty;

        try
        {


            Console.WriteLine("Starting correlation data load...");
            var httpClient = HttpClientFactory.CreateClient();

            // Prepare trash items data (use dummy or real based on toggle)
            var trashItemsToSend = trashItems
                .Select(item => new
                {
                    id = item.Id.ToString(),
                    litterType = item.LitterType,
                    latitude = item.Latitude,
                    longitude = item.Longitude,
                    timestamp = item.Timestamp
                }).ToList();

            Console.WriteLine($"Sending {trashItemsToSend.Count} trash items to API");

            var requestData = new
            {
                trash_items = trashItemsToSend,
                latitude = 51.5912, // Breda coordinates
                longitude = 4.7761,
                days_back = 30
            };

            Console.WriteLine("Making API request...");
            var response = await httpClient.PostAsJsonAsync("http://localhost:8000/api/correlation/analyze", requestData);

            Console.WriteLine($"API Response status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Response received - Length: {responseContent.Length} characters");

                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower
                    };

                correlationData = JsonSerializer.Deserialize<CorrelationData>(responseContent, options);

                if (correlationData != null)
                {
                    Console.WriteLine($"Successfully parsed correlation data:");
                    Console.WriteLine($"  - Coefficient: {correlationData.CorrelationCoefficient}");
                    Console.WriteLine($"  - Strength: {correlationData.CorrelationStrength}");
                    Console.WriteLine($"  - Sunny: {correlationData.SunnyWeatherPercentage}%");
                    Console.WriteLine($"  - Rainy: {correlationData.RainyWeatherPercentage}%");
                    Console.WriteLine($"  - Temperature data points: {correlationData.ChartData.TemperatureData.Temperature.Count}");
                    Console.WriteLine($"  - Weather distribution labels: {correlationData.ChartData.WeatherDistribution.Labels.Count}");
                    Console.WriteLine($"  - Correlation scatter points: {correlationData.ChartData.CorrelationScatter.Temperature.Count}");
                    Console.WriteLine($"  - Insights count: {correlationData.Insights.Count}");

                    // Force state change to render HTML
                    StateHasChanged();

                    // Wait longer for DOM to update and start chart initialization in background
                    _ = Task.Run(async () =>
                    {
                        await Task.Delay(1000); // Wait 1 second for DOM to be ready
                        await InvokeAsync(async () =>
                        {
                            await InitializeCorrelationChart();
                        });
                    });
                }
                else
                {
                    correlationError = "Failed to parse correlation data from API response";
                    Console.WriteLine(correlationError);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                correlationError = $"API Error: {response.StatusCode} - {errorContent}";
                Console.WriteLine($"API Error - Status: {response.StatusCode}, Content: {errorContent}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            correlationError = $"Network error: {httpEx.Message}. Make sure the FastAPI server is running on http://localhost:8000";
            Console.WriteLine($"HTTP Exception in LoadCorrelationData: {httpEx}");
        }
        catch (JsonException jsonEx)
        {
            correlationError = $"JSON parsing error: {jsonEx.Message}";
            Console.WriteLine($"JSON Exception in LoadCorrelationData: {jsonEx}");
        }
        catch (Exception ex)
        {
            correlationError = $"Unexpected error: {ex.Message}";
            Console.WriteLine($"General Exception in LoadCorrelationData: {ex}");
        }
        finally
        {
            isLoadingCorrelation = false;
            StateHasChanged();
        }
    }

    private async Task InitializeCorrelationChart()
    {
        if (correlationData?.ChartData == null)
        {
            Console.WriteLine("No correlation data available");
            return;
        }

        Console.WriteLine("Starting chart initialization...");

        // Wait for DOM elements to exist with retry mechanism
        var maxRetries = 10;
        var retryCount = 0;
        bool elementsExist = false;

        while (!elementsExist && retryCount < maxRetries)
        {
            await Task.Delay(200); // Wait 200ms between checks

            try
            {
                var correlationExists = await JS.InvokeAsync<bool>("eval", "document.getElementById('correlationChart') !== null");
                var weatherExists = await JS.InvokeAsync<bool>("eval", "document.getElementById('weatherDistributionChart') !== null");
                var scatterExists = await JS.InvokeAsync<bool>("eval", "document.getElementById('scatterChart') !== null");

                Console.WriteLine($"Retry {retryCount + 1}: Canvas elements exist - Correlation: {correlationExists}, Weather: {weatherExists}, Scatter: {scatterExists}");

                if (correlationExists && weatherExists && scatterExists)
                {
                    elementsExist = true;
                    break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking canvas elements on retry {retryCount + 1}: {ex.Message}");
            }

            retryCount++;
        }

        if (!elementsExist)
        {
            Console.WriteLine("Canvas elements not found after maximum retries. Charts will not be initialized.");
            return;
        }

        Console.WriteLine("Canvas elements found, initializing charts...");

        try
        {
            // Initialize main correlation chart
            var chartData = new
            {
                labels = correlationData.ChartData.TemperatureData.Labels.ToArray(),
                datasets = new object[]
                {
                new
                {
                    label = "Temperatuur (°C)",
                    data = correlationData.ChartData.TemperatureData.Temperature.ToArray(),
                    borderColor = "#ff6b6b",
                    backgroundColor = "rgba(255, 107, 107, 0.1)",
                    yAxisID = "y",
                    type = "line"
                },
                new
                {
                    label = "Afval Items",
                    data = correlationData.ChartData.TemperatureData.TrashCount.ToArray(),
                    borderColor = "#4ecdc4",
                    backgroundColor = "rgba(78, 205, 196, 0.3)",
                    yAxisID = "y1",
                    type = "bar"
                }
                }
            };

            await JS.InvokeVoidAsync("initializeCorrelationChart", chartData);
            Console.WriteLine("Main correlation chart initialized successfully");

            // Initialize weather distribution chart
            if (correlationData.ChartData.WeatherDistribution?.Labels?.Any() == true)
            {
                var weatherChartData = new
                {
                    labels = correlationData.ChartData.WeatherDistribution.Labels.ToArray(),
                    values = correlationData.ChartData.WeatherDistribution.Values.ToArray()
                };

                await JS.InvokeVoidAsync("initializeWeatherDistributionChart", weatherChartData);
                Console.WriteLine("Weather distribution chart initialized successfully");
            }

            // Initialize scatter plot
            if (correlationData.ChartData.CorrelationScatter?.Temperature?.Any() == true)
            {
                var scatterData = new
                {
                    datasets = new object[]
                    {
                    new
                    {
                        label = "Temperatuur vs Afval",
                        data = correlationData.ChartData.CorrelationScatter.Temperature
                            .Zip(correlationData.ChartData.CorrelationScatter.TrashCount, (temp, trash) => new { x = temp, y = trash })
                            .ToArray(),
                        backgroundColor = "rgba(75, 192, 192, 0.6)",
                        borderColor = "rgba(75, 192, 192, 1)",
                        borderWidth = 1
                    }
                    }
                };

                await JS.InvokeVoidAsync("initializeScatterChart", scatterData);
                Console.WriteLine("Scatter chart initialized successfully");
            }

            Console.WriteLine("All charts initialization completed successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing correlation charts: {ex.Message}");
        }
    }
}



<main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="pt-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="dashboard" class="text-decoration-none">Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">Analyse</li>
        </ol>
    </nav>

    <h1 class="h2 mb-4">Datafilters</h1>
    <div class="mb-3">
        <button class="btn btn-outline-primary"
                @onclick="async () => { useDummyData = !useDummyData; await ToggleDataMode(); }">
            <i class="fas @(useDummyData ? "fa-database" : "fa-vial") me-2"></i>
            Gebruik @(useDummyData ? "echte data" : "dummy data")
        </button>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Filters Section -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="card-title mb-0">Datafilters</h5>
                    @if (HasActiveFilters())
                    {
                        <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ResetFilters" title="Alle filters wissen">
                            <i class="fas fa-times me-1"></i>
                            Reset
                        </button>
                    }
                </div>
                <div class="row g-3">
                    <div class="col-md-4">
                        <label for="periode" class="form-label">Periode</label>
                        <select class="form-select" id="periode" @bind="selectedPeriod" @bind:after="OnFilterChanged">
                            <option value="">Selecteer datumbereik</option>
                            <option value="week">Deze week</option>
                            <option value="month">Deze maand</option>
                            <option value="year">Dit jaar</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="locatie" class="form-label">Locatie</label>
                        <select class="form-select" id="locatie" @bind="selectedLocation" @bind:after="OnFilterChanged">
                            <option value="">Kies locatie</option>
                            @foreach (var location in locationChartData.Select(l => l.LocationName).Distinct())
                            {
                                <option value="@location">@location</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="afvalcategorie" class="form-label">Afvalcategorie</label>
                        <select class="form-select" id="afvalcategorie" @bind="selectedCategory" @bind:after="OnFilterChanged">
                            <option value="">Selecteer categorie</option>
                            <option value="plastic">Plastic</option>
                            <option value="papier">Papier</option>
                            <option value="gft">GFT/Organisch</option>
                            <option value="glas">Glas</option>
                        </select>
                    </div>
                </div>
                @if (HasActiveFilters())
                {
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="fas fa-filter me-1"></i>
                            Actieve filters: @GetFilterSummary()
                        </small>
                    </div>
                }
            </div>
        </div>

        <!-- Data Summary -->
        <div class="alert alert-info mb-4">
            <i class="fas fa-info-circle me-2"></i>
            Totaal @trashItems.Count afvalitems geladen uit de database.
        </div>

        <!-- Chart Section -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Overzicht afvaldata</h5>

                <!-- Chart Tabs -->
                <ul class="nav nav-tabs chart-tabs mb-3" id="chartTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="typeverdeling-tab" data-bs-toggle="tab" data-bs-target="#typeverdeling" type="button" role="tab">
                            Afval Typeverdeling per Locatie
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="frequentie-tab" data-bs-toggle="tab" data-bs-target="#frequentie" type="button" role="tab">
                            Frequentie Analyse
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="correlaties-tab" data-bs-toggle="tab" data-bs-target="#correlaties" type="button" role="tab">
                            Correlaties
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content" id="chartTabContent">
                    <div class="tab-pane fade show active" id="typeverdeling" role="tabpanel">
                        <h6 class="mb-3">Afval Typeverdeling per Locatie</h6>
                        <p class="text-muted small mb-3">Analyse van verschillende afvaltypes per locatie</p>
                        <p class="text-muted small mb-2">
                            Data voor: @GetFilterSummary()
                        </p>

                        @if (locationChartData.Any())
                        {
                            <!-- Chart Container -->
                            <div class="chart-container" style="position: relative; height: 400px; width: 100%;">
                                <canvas id="typeDistributionChart"></canvas>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                Geen data beschikbaar voor locatie-analyse.
                            </div>
                        }
                    </div>

                    <div class="tab-pane fade" id="frequentie" role="tabpanel">
                        <div class="frequency-chart-header mb-4">
                            <h6 class="mb-1">Frequentie Analyse</h6>
                            <p class="text-muted small mb-0">Afvaldetecties per tijdstip van de dag</p>
                            <p class="text-muted small mb-2">
                                Data voor: @GetFilterSummary()
                            </p>
                        </div>

                        @if (frequencyData.Any())
                        {
                            <!-- Chart Container -->
                            <div class="chart-container" style="position: relative; height: 400px; width: 100%;">
                                <canvas id="frequencyChart"></canvas>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                Geen data beschikbaar voor frequentieanalyse.
                            </div>
                        }
                    </div>

                    <div class="tab-pane fade" id="correlaties" role="tabpanel">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div>
                                <h6 class="mb-1">Correlatie: Weer & Afval</h6>
                                <p class="text-muted small mb-0">Analyse van de relatie tussen weersomstandigheden en afvalvolume</p>
                            </div>
                        </div>

                        @if (isLoadingCorrelation)
                        {
                            <div class="d-flex justify-content-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Correlatie wordt geladen...</span>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(correlationError))
                        {
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @correlationError
                            </div>
                            <button class="btn btn-primary" @onclick="LoadCorrelationData">
                                <i class="fas fa-redo me-2"></i>Opnieuw proberen
                            </button>
                        }
                        else if (correlationData != null)
                        {
                            <!-- Correlation Statistics -->
                            <div class="row mb-4">
                                <div class="col-md-4">
                                    <div class="card correlation-stat-card text-center">
                                        <div class="card-body">
                                            <div class="correlation-icon mb-2">
                                                <i class="fas fa-chart-line"></i>
                                            </div>
                                            <h3 class="correlation-value @(correlationData.CorrelationCoefficient > 0 ? "text-success" : correlationData.CorrelationCoefficient < 0 ? "text-danger" : "text-muted")">
                                                @correlationData.CorrelationCoefficient.ToString("0.00")
                                            </h3>
                                            <p class="correlation-label">Correlatie Coëfficiënt</p>
                                            <small class="text-muted">@correlationData.CorrelationStrength</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card correlation-stat-card text-center">
                                        <div class="card-body">
                                            <div class="correlation-icon mb-2 text-warning">
                                                <i class="fas fa-sun"></i>
                                            </div>
                                            <h3 class="correlation-value text-warning">
                                                @correlationData.SunnyWeatherPercentage.ToString("0.0")%
                                            </h3>
                                            <p class="correlation-label">Zonnig Weer</p>
                                            <small class="text-muted">Percentage zonnige dagen</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="card correlation-stat-card text-center">
                                        <div class="card-body">
                                            <div class="correlation-icon mb-2 text-info">
                                                <i class="fas fa-cloud-rain"></i>
                                            </div>
                                            <h3 class="correlation-value text-info">
                                                @correlationData.RainyWeatherPercentage.ToString("0.0")%
                                            </h3>
                                            <p class="correlation-label">Regenachtig Weer</p>
                                            <small class="text-muted">Percentage regenachtige dagen</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Main Correlation Chart -->
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-chart-line me-2"></i>Temperatuur vs Afval Correlatie
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="chart-container" style="position: relative; height: 400px; width: 100%;">
                                        <canvas id="correlationChart"></canvas>
                                    </div>
                                </div>
                            </div>

                            <!-- Additional Charts Row -->
                            <div class="row mb-4">
                                <!-- Weather Distribution Chart -->
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h6 class="mb-0">
                                                <i class="fas fa-cloud me-2"></i>Weer Verdeling
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="chart-container" style="position: relative; height: 300px; width: 100%;">
                                                <canvas id="weatherDistributionChart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Scatter Plot -->
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h6 class="mb-0">
                                                <i class="fas fa-chart-scatter me-2"></i>Correlatie Scatter Plot
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="chart-container" style="position: relative; height: 300px; width: 100%;">
                                                <canvas id="scatterChart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Temperature Statistics -->
                            @if (correlationData.ChartData.TemperatureData.Temperature.Any())
                            {
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h6 class="mb-0">
                                            <i class="fas fa-thermometer-half me-2"></i>Temperatuur Statistieken
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        @{
                                            var avgTemp = correlationData.ChartData.TemperatureData.Temperature.Average();
                                            var maxTemp = correlationData.ChartData.TemperatureData.Temperature.Max();
                                            var minTemp = correlationData.ChartData.TemperatureData.Temperature.Min();
                                        }

                                        <div class="row text-center">
                                            <div class="col-md-3">
                                                <h5 class="text-danger">@maxTemp.ToString("0.0")°C</h5>
                                                <small class="text-muted">Maximum</small>
                                            </div>
                                            <div class="col-md-3">
                                                <h5 class="text-primary">@avgTemp.ToString("0.0")°C</h5>
                                                <small class="text-muted">Gemiddeld</small>
                                            </div>
                                            <div class="col-md-3">
                                                <h5 class="text-info">@minTemp.ToString("0.0")°C</h5>
                                                <small class="text-muted">Minimum</small>
                                            </div>
                                            <div class="col-md-3">
                                                <h5 class="text-success">@correlationData.ChartData.TemperatureData.TrashCount.Sum()</h5>
                                                <small class="text-muted">Totaal Afval Items</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            <!-- Insights -->
                            @if (correlationData.Insights.Any())
                            {
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">
                                            <i class="fas fa-lightbulb me-2"></i>Inzichten
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        @foreach (var insight in correlationData.Insights)
                                        {
                                            <div class="alert alert-info mb-2">
                                                <i class="fas fa-info-circle me-2"></i>@insight
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }

                    </div>

                </div>
            </div>
        </div>

        <!-- Dynamic Insights based on location data -->
        <h5 class="mb-3">Data Inzichten</h5>

        @if (locationChartData.Any())
        {
            var topLocation = locationChartData.First();
            var topWasteType = topLocation.TypeCounts.OrderByDescending(kvp => kvp.Value).First();

            <div class="card mb-3">
                <div class="card-body">
                    <span class="badge insight-badge mb-2">Inzicht</span>
                    <h6 class="card-title">Meest vervuilde locatie</h6>
                    <p class="card-text text-muted">
                        @topLocation.LocationName heeft de meeste afvalmeldingen (@topLocation.TotalCount items),
                        vooral @topWasteType.Key (@topWasteType.Value items).
                    </p>
                </div>
            </div>
        }

        @if (trashItems.Any())
        {
            var recentItems = trashItems.Where(item => item.Timestamp >= DateTime.Now.AddDays(-7)).Count();
            <div class="card mb-4">
                <div class="card-body">
                    <span class="badge insight-badge mb-2">Inzicht</span>
                    <h6 class="card-title">Recente activiteit</h6>
                    <p class="card-text text-muted">
                        In de afgelopen week zijn er @recentItems nieuwe afvalitems geregistreerd.
                    </p>
                </div>
            </div>
        }
    }
</main>




