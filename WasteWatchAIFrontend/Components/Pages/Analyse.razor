@page "/analyse"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

@code {
    // Models
    public class DummyTrashItem
    {
        public Guid Id { get; set; }
        public string LitterType { get; set; } = string.Empty;
        public float Latitude { get; set; }
        public float Longitude { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public class LocationChartData
    {
        public string LocationName { get; set; } = string.Empty;
        public Dictionary<string, int> TypeCounts { get; set; } = new();
        public int TotalCount { get; set; }
    }

    public class FrequencyDataItem
    {
        public string Label { get; set; } = string.Empty;
        public int Value { get; set; }
        public string Time { get; set; } = string.Empty;
    }

    // State variables
    private List<DummyTrashItem> trashItems = new();
    private List<LocationChartData> locationChartData = new();
    private List<FrequencyDataItem> frequencyData = new();
    private bool isLoading = true;
    private string selectedPeriod = string.Empty;
    private string selectedLocation = string.Empty;
    private string selectedCategory = string.Empty;

    // Define color mapping for waste types
    private readonly Dictionary<string, string> wasteTypeColors = new()
    {
        { "Plastic", "#e74c3c" },      // Red
        { "Papier", "#3498db" },       // Blue
        { "Organisch", "#2ecc71" },    // Green
        { "Glas", "#f39c12" },         // Orange
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadTrashData();
        await ProcessData();
    }

    private async Task LoadTrashData()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("WasteWatchAPI");
            var response = await httpClient.GetAsync("api/dummytrashitems");
            if (response.IsSuccessStatusCode)
            {
                trashItems = await response.Content.ReadFromJsonAsync<List<DummyTrashItem>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trash data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ProcessData()
    {
        if (!trashItems.Any()) return;

        // Process location-based chart data
        var locationGroups = trashItems
            .GroupBy(item => GetLocationName(item.Latitude, item.Longitude))
            .Select(group => new LocationChartData
                {
                    LocationName = group.Key,
                    TypeCounts = group.GroupBy(item => item.LitterType)
                    .ToDictionary(typeGroup => typeGroup.Key, typeGroup => typeGroup.Count()),
                    TotalCount = group.Count()
                })
            .OrderByDescending(loc => loc.TotalCount)
            .Take(5) // Show top 5 locations
            .ToList();

        locationChartData = locationGroups;

        // Process frequency data - count by hour of day
        var hourlyFrequency = new List<FrequencyDataItem>();

        // Create hourly buckets from 06:00 to 22:00
        for (int hour = 6; hour <= 22; hour++)
        {
            var count = trashItems.Count(item => item.Timestamp.Hour == hour);
            hourlyFrequency.Add(new FrequencyDataItem
                {
                    Label = $"{hour:D2}:00",
                    Time = $"{hour:D2}:00",
                    Value = count
                });
        }

        frequencyData = hourlyFrequency;
    }

    private string GetLocationName(float latitude, float longitude)
    {
        // Breda: Grote Markt (updated range)
        if (latitude >= 51.5890 && latitude <= 51.5900 && longitude >= 4.7750 && longitude <= 4.7765)
            return "Grote Markt Breda";

        // Breda: Centraal Station
        if (latitude >= 51.5953 && latitude <= 51.5963 && longitude >= 4.7787 && longitude <= 4.7797)
            return "Centraal Station Breda";

        // Breda: Valkenberg Park
        if (latitude >= 51.5929 && latitude <= 51.5939 && longitude >= 4.7791 && longitude <= 4.7801)
            return "Valkenberg Park";

        // Breda: Haagdijk (updated range)
        if (latitude >= 51.5920 && latitude <= 51.5925 && longitude >= 4.7685 && longitude <= 4.7695)
            return "Haagdijk";

        // Breda: Chassé Park (new)
        if (latitude >= 51.5860 && latitude <= 51.5866 && longitude >= 4.7848 && longitude <= 4.7856)
            return "Chassé Park";

        // Breda: Chasséveld (existing)
        if (latitude >= 51.5890 && latitude <= 51.5902 && longitude >= 4.7750 && longitude <= 4.7766)
            return "Chasséveld";

        // Default locations for other coordinates
        var random = new Random((int)(latitude * 1000 + longitude * 1000));
        var locations = new[] { "Stadspark", "Marktplein", "Winkelcentrum", "Sportpark", "Industrieterrein" };
        return locations[random.Next(locations.Length)];
    }



    private string GetDayAbbreviation(DayOfWeek day)
    {
        return day switch
        {
            DayOfWeek.Monday => "Ma",
            DayOfWeek.Tuesday => "Di",
            DayOfWeek.Wednesday => "Wo",
            DayOfWeek.Thursday => "Do",
            DayOfWeek.Friday => "Vr",
            DayOfWeek.Saturday => "Za",
            DayOfWeek.Sunday => "Zo",
            _ => day.ToString()
        };
    }

    private int GetDayOrder(string dayAbbr)
    {
        return dayAbbr switch
        {
            "Ma" => 1,
            "Di" => 2,
            "Wo" => 3,
            "Do" => 4,
            "Vr" => 5,
            "Za" => 6,
            "Zo" => 7,
            _ => 8
        };
    }

    private async Task ApplyFilters()
    {
        isLoading = true;
        StateHasChanged();

        var filteredItems = trashItems.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedPeriod))
        {
            var now = DateTime.Now;
            filteredItems = selectedPeriod switch
            {
                "week" => filteredItems.Where(item => item.Timestamp >= now.AddDays(-7)),
                "month" => filteredItems.Where(item => item.Timestamp >= now.AddMonths(-1)),
                "year" => filteredItems.Where(item => item.Timestamp >= now.AddYears(-1)),
                _ => filteredItems
            };
        }

        if (!string.IsNullOrEmpty(selectedCategory))
        {
            var categoryMap = new Dictionary<string, string>
            {
                { "plastic", "Plastic" },
                { "papier", "Papier" },
                { "gft", "Organisch" },
                { "glas", "Glas" }
            };

            if (categoryMap.TryGetValue(selectedCategory, out var actualCategory))
            {
                filteredItems = filteredItems.Where(item =>
                    item.LitterType.Equals(actualCategory, StringComparison.OrdinalIgnoreCase));
            }
        }

        if (!string.IsNullOrEmpty(selectedLocation))
        {
            filteredItems = filteredItems.Where(item =>
                GetLocationName(item.Latitude, item.Longitude).Equals(selectedLocation, StringComparison.OrdinalIgnoreCase));
        }

        var originalItems = trashItems;
        trashItems = filteredItems.ToList();

        await ProcessData();
        trashItems = originalItems;

        await Task.Delay(500);
        isLoading = false;
        StateHasChanged();
    }

    private int GetMaxValueForLocation(LocationChartData location)
    {
        return location.TypeCounts.Values.DefaultIfEmpty(0).Max();
    }

    private List<string> GetAllWasteTypes()
    {
        return locationChartData
            .SelectMany(loc => loc.TypeCounts.Keys)
            .Distinct()
            .OrderBy(type => type)
            .ToList();
    }

    private string GenerateFrequencyPath()
    {
        if (!frequencyData.Any()) return "";

        var maxValue = frequencyData.Max(f => f.Value);
        if (maxValue == 0) maxValue = 1;

        var chartWidth = 800;
        var chartHeight = 300;
        var padding = 40;

        var pathParts = new List<string>();

        for (int i = 0; i < frequencyData.Count; i++)
        {
            var x = padding + (i * (chartWidth - 2 * padding) / (frequencyData.Count - 1));
            var y = chartHeight - padding - ((frequencyData[i].Value * (chartHeight - 2 * padding)) / maxValue);

            if (i == 0)
                pathParts.Add($"M {x} {y}");
            else
                pathParts.Add($"L {x} {y}");
        }

        return string.Join(" ", pathParts);
    }

    private string GenerateFrequencyArea()
    {
        if (!frequencyData.Any()) return "";

        var maxValue = frequencyData.Max(f => f.Value);
        if (maxValue == 0) maxValue = 1;

        var chartWidth = 800;
        var chartHeight = 300;
        var padding = 40;

        var pathParts = new List<string>();

        // Start from bottom left
        pathParts.Add($"M {padding} {chartHeight - padding}");

        // Draw the curve
        for (int i = 0; i < frequencyData.Count; i++)
        {
            var x = padding + (i * (chartWidth - 2 * padding) / (frequencyData.Count - 1));
            var y = chartHeight - padding - ((frequencyData[i].Value * (chartHeight - 2 * padding)) / maxValue);
            pathParts.Add($"L {x} {y}");
        }

        // Close the area to bottom right
        pathParts.Add($"L {chartWidth - padding} {chartHeight - padding}");
        pathParts.Add("Z");

        return string.Join(" ", pathParts);
    }

    // New: Generate SVG bar chart for typeverdling (waste type distribution per location)
    private string GenerateTypeverdlingBars(LocationChartData location, int chartWidth = 400, int chartHeight = 220, int padding = 40)
    {
        var wasteTypes = GetAllWasteTypes();
        var maxValue = location.TypeCounts.Values.DefaultIfEmpty(1).Max();
        if (maxValue == 0) maxValue = 1;

        var barWidth = (chartWidth - 2 * padding) / Math.Max(wasteTypes.Count, 1);
        var bars = new List<string>();

        for (int i = 0; i < wasteTypes.Count; i++)
        {
            var wasteType = wasteTypes[i];
            var count = location.TypeCounts.GetValueOrDefault(wasteType, 0);
            var height = (count * (chartHeight - 2 * padding)) / maxValue;
            var x = padding + i * barWidth;
            var y = chartHeight - padding - height;
            var color = wasteTypeColors.GetValueOrDefault(wasteType, "#95a5a6");

            bars.Add($@"<rect x=""{x}"" y=""{y}"" width=""{barWidth - 8}"" height=""{height}"" fill=""{color}"" rx=""4"" data-bs-toggle=""tooltip"" title=""{wasteType}: {count} items"" />");
        }

        return string.Join("\n", bars);
    }

    // New: Generate a single SVG for typeverdeling (waste type distribution) for all locations
    private MarkupString GenerateCombinedTypeverdlingSvg()
    {
        if (!locationChartData.Any())
            return (MarkupString)string.Empty;

        var wasteTypes = GetAllWasteTypes();
        var groupCount = locationChartData.Count;
        // Make bars and gaps wider for a wider chart
        var barWidth = 28;      // was 18
        var groupGap = 64;      // was 36
        var barGap = 16;        // was 6
        var paddingLeft = 80;   // was 60
        var paddingRight = 60;  // was 30
        var paddingTop = 30;
        var paddingBottom = 50;
        var chartHeight = 220;
        // Calculate a wider chart width
        var chartWidth = paddingLeft + paddingRight + groupCount * (wasteTypes.Count * (barWidth + barGap) - barGap + groupGap);

        var maxValue = locationChartData
            .SelectMany(loc => loc.TypeCounts.Values)
            .DefaultIfEmpty(1)
            .Max();
        if (maxValue == 0) maxValue = 1;

        var svg = new System.Text.StringBuilder();
        svg.AppendLine($@"<svg viewBox=""0 0 {chartWidth} {chartHeight + paddingTop + paddingBottom}"" class=""typeverdling-svg"" width=""{chartWidth}"" height=""{chartHeight + paddingTop + paddingBottom}"">");

        // Y-axis grid lines and labels (horizontal gridlines)
        int ySteps = 4;
        for (int i = 0; i <= ySteps; i++)
        {
            var yValue = (maxValue * i) / ySteps;
            var yPos = paddingTop + chartHeight - (i * chartHeight / ySteps);
            svg.AppendLine($@"<text x=""{paddingLeft - 8}"" y=""{yPos + 4}"" font-size=""11"" fill=""#666"" text-anchor=""end"">{yValue}</text>");
            svg.AppendLine($@"<line x1=""{paddingLeft}"" y1=""{yPos}"" x2=""{chartWidth - paddingRight}"" y2=""{yPos}"" stroke=""#000000"" stroke-width=""1"" opacity=""0.5"" />");
        }

        // Vertical gridlines at each group (location) boundary
        for (int locIdx = 0; locIdx <= groupCount; locIdx++)
        {
            var groupX = paddingLeft + locIdx * (wasteTypes.Count * (barWidth + barGap) - barGap + groupGap);
            svg.AppendLine($@"<line x1=""{groupX}"" y1=""{paddingTop}"" x2=""{groupX}"" y2=""{paddingTop + chartHeight}"" stroke=""#000000"" stroke-width=""1"" opacity=""0.5"" />");
        }

        // Bars for each location group
        for (int locIdx = 0; locIdx < groupCount; locIdx++)
        {
            var location = locationChartData[locIdx];
            var groupX = paddingLeft + locIdx * (wasteTypes.Count * (barWidth + barGap) - barGap + groupGap);

            for (int wtIdx = 0; wtIdx < wasteTypes.Count; wtIdx++)
            {
                var wasteType = wasteTypes[wtIdx];
                var count = location.TypeCounts.GetValueOrDefault(wasteType, 0);
                var height = (count * chartHeight) / maxValue;
                var x = groupX + wtIdx * (barWidth + barGap);
                var y = paddingTop + chartHeight - height;
                var color = wasteTypeColors.GetValueOrDefault(wasteType, "#95a5a6");

                svg.AppendLine($@"<rect x=""{x}"" y=""{y}"" width=""{barWidth}"" height=""{height}"" fill=""{color}"" rx=""4"" data-bs-toggle=""tooltip"" title=""{location.LocationName} - {wasteType}: {count} items"" />");
            }
        }

        // X-axis location labels (centered under each group)
        for (int locIdx = 0; locIdx < groupCount; locIdx++)
        {
            var location = locationChartData[locIdx];
            var groupX = paddingLeft + locIdx * (wasteTypes.Count * (barWidth + barGap) - barGap + groupGap);
            var groupWidth = wasteTypes.Count * (barWidth + barGap) - barGap;
            var labelX = groupX + groupWidth / 2;
            var labelY = paddingTop + chartHeight + 24;
            svg.AppendLine($@"<text x=""{labelX}"" y=""{labelY}"" font-size=""12"" fill=""#444"" text-anchor=""middle"" class=""typeverdling-location-label"">{location.LocationName}</text>");
        }

        svg.AppendLine("</svg>");
        return (MarkupString)svg.ToString();
    }
}

<!-- Main Content -->
<main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="pt-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="dashboard" class="text-decoration-none">Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">Analyse</li>
        </ol>
    </nav>

    <h1 class="h2 mb-4">Datafilters</h1>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Filters Section -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Datafilters</h5>
                <div class="row g-3 align-items-end">
                    <div class="col-md-3">
                        <label for="periode" class="form-label">Periode</label>
                        <select class="form-select" id="periode" @bind="selectedPeriod">
                            <option value="">Selecteer datumbereik</option>
                            <option value="week">Deze week</option>
                            <option value="month">Deze maand</option>
                            <option value="year">Dit jaar</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="locatie" class="form-label">Locatie</label>
                        <select class="form-select" id="locatie" @bind="selectedLocation">
                            <option value="">Kies locatie</option>
                            @foreach (var location in locationChartData.Select(l => l.LocationName).Distinct())
                            {
                                <option value="@location">@location</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="afvalcategorie" class="form-label">Afvalcategorie</label>
                        <select class="form-select" id="afvalcategorie" @bind="selectedCategory">
                            <option value="">Selecteer categorie</option>
                            <option value="plastic">Plastic</option>
                            <option value="papier">Papier</option>
                            <option value="gft">GFT/Organisch</option>
                            <option value="glas">Glas</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <button type="button" class="btn btn-primary" @onclick="ApplyFilters" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <text>Laden...</text>
                            }
                            else
                            {
                                <text>Toepassen</text>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Data Summary -->
        <div class="alert alert-info mb-4">
            <i class="fas fa-info-circle me-2"></i>
            Totaal @trashItems.Count afvalitems geladen uit de database.
        </div>

        <!-- Chart Section -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Overzicht afvaldata</h5>

                <!-- Chart Tabs -->
                <ul class="nav nav-tabs chart-tabs mb-3" id="chartTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="typeverdeling-tab" data-bs-toggle="tab" data-bs-target="#typeverdeling" type="button" role="tab">
                            Afval Typeverdeling per Locatie
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="frequentie-tab" data-bs-toggle="tab" data-bs-target="#frequentie" type="button" role="tab">
                            Frequentie Analyse
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="correlaties-tab" data-bs-toggle="tab" data-bs-target="#correlaties" type="button" role="tab">
                            Correlaties
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content" id="chartTabContent">
                    <div class="tab-pane fade show active" id="typeverdeling" role="tabpanel">
                        <h6 class="mb-3">Afval Typeverdeling per Locatie</h6>
                        <p class="text-muted small mb-3">Analyse van verschillende afvaltypes per locatie</p>

                        @if (locationChartData.Any())
                        {
                            <!-- Legend -->
                            <div class="mb-3">
                                <div class="d-flex flex-wrap gap-3">
                                    @foreach (var wasteType in GetAllWasteTypes())
                                    {
                                        <div class="d-flex align-items-center">
                                            <div class="legend-color me-2" style="background-color: @wasteTypeColors.GetValueOrDefault(wasteType, "#95a5a6")"></div>
                                            <small>@wasteType</small>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Combined SVG Bar Chart for all locations -->
                            <div class="typeverdling-svg-charts">
                                @GenerateCombinedTypeverdlingSvg()
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                Geen data beschikbaar voor locatie-analyse.
                            </div>
                        }
                    </div>

                    <div class="tab-pane fade" id="frequentie" role="tabpanel">
                        <div class="frequency-chart-header mb-4">
                            <h6 class="mb-1">Frequentie Analyse</h6>
                            <p class="text-muted small mb-0">Afvaldetecties per tijdstip van de dag</p>
                        </div>

                        @if (frequencyData.Any())
                        {
                            <div class="frequency-chart-container">
                                <svg class="frequency-svg" viewBox="0 0 800 350">
                                    <!-- Grid lines -->
                                    <defs>
                                        <pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse">
                                            <path d="M 50 0 L 0 0 0 50" fill="none" stroke="#e5e5e5" stroke-width="1" opacity="0.3" />
                                        </pattern>
                                    </defs>
                                    <rect width="100%" height="100%" fill="url(#grid)" />

                                    <!-- Y-axis labels -->
                                    @{
                                        var maxFreqValue = frequencyData.Max(f => f.Value);
                                        var ySteps = 4;
                                        var chartHeight = 300;
                                        var padding = 40;
                                    }
                                    @for (int i = 0; i <= ySteps; i++)
                                    {
                                        var yValue = (maxFreqValue * i) / ySteps;
                                        var yPos = chartHeight - padding - (i * (chartHeight - 2 * padding) / ySteps);
                                        <svg:text x="30" y="@(yPos + 4)" font-size="12" fill="#666" text-anchor="end">@yValue</svg:text>
                                        <line x1="35" y1="@yPos" x2="760" y2="@yPos" stroke="#e5e5e5" stroke-width="1" opacity="0.5"></line>
                                    }

                                    <!-- X-axis labels -->
                                    @for (int i = 0; i < frequencyData.Count; i += 2)
                                    {
                                        var xPos = padding + (i * (800 - 2 * padding) / (frequencyData.Count - 1));
                                        <svg:text x="@xPos" y="@(chartHeight - 15)" font-size="12" fill="#666" text-anchor="middle">@frequencyData[i].Time</svg:text>
                                    }

                                    <!-- Area fill -->
                                    <path d="@GenerateFrequencyArea()"
                                          fill="url(#blueGradient)"
                                          opacity="0.3"></path>

                                    <!-- Line -->
                                    <path d="@GenerateFrequencyPath()"
                                          fill="none"
                                          stroke="#4299e1"
                                          stroke-width="3"
                                          stroke-linecap="round"
                                          stroke-linejoin="round"></path>

                                    <!-- Data points -->
                                    @for (int i = 0; i < frequencyData.Count; i++)
                                    {
                                        var xPos = padding + (i * (800 - 2 * padding) / (frequencyData.Count - 1));
                                        var yPos = chartHeight - padding - ((frequencyData[i].Value * (chartHeight - 2 * padding)) / maxFreqValue);
                                        <circle cx="@xPos"
                                                cy="@yPos"
                                                r="4"
                                                fill="#4299e1"
                                                stroke="white"
                                                stroke-width="2"
                                                class="frequency-point"
                                                data-bs-toggle="tooltip"
                                                title="@frequencyData[i].Time: @frequencyData[i].Value detecties"></circle>
                                    }

                                    <!-- Gradient definition -->
                                    <defs>
                                        <linearGradient id="blueGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                                            <stop offset="0%" style="stop-color:#4299e1;stop-opacity:0.8"></stop>
                                            <stop offset="100%" style="stop-color:#4299e1;stop-opacity:0.1"></stop>
                                        </linearGradient>
                                    </defs>
                                </svg>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                Geen data beschikbaar voor frequentieanalyse.
                            </div>
                        }
                    </div>

                    <div class="tab-pane fade" id="correlaties" role="tabpanel">
                        <h6 class="mb-3">Correlatie: Weer & Afval</h6>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Correlatie-analyse wordt geladen...
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Dynamic Insights based on location data -->
        <h5 class="mb-3">Data Inzichten</h5>

        @if (locationChartData.Any())
        {
            var topLocation = locationChartData.First();
            var topWasteType = topLocation.TypeCounts.OrderByDescending(kvp => kvp.Value).First();

            <div class="card mb-3">
                <div class="card-body">
                    <span class="badge insight-badge mb-2">Inzicht</span>
                    <h6 class="card-title">Meest vervuilde locatie</h6>
                    <p class="card-text text-muted">
                        @topLocation.LocationName heeft de meeste afvalmeldingen (@topLocation.TotalCount items),
                        vooral @topWasteType.Key (@topWasteType.Value items).
                    </p>
                </div>
            </div>
        }

        @if (trashItems.Any())
        {
            var recentItems = trashItems.Where(item => item.Timestamp >= DateTime.Now.AddDays(-7)).Count();
            <div class="card mb-4">
                <div class="card-body">
                    <span class="badge insight-badge mb-2">Inzicht</span>
                    <h6 class="card-title">Recente activiteit</h6>
                    <p class="card-text text-muted">
                        In de afgelopen week zijn er @recentItems nieuwe afvalitems geregistreerd.
                    </p>
                </div>
            </div>
        }
    }
</main>


<link href="css/chart.css" rel="stylesheet" />

<script>
    document.addEventListener('DOMContentLoaded', function() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>