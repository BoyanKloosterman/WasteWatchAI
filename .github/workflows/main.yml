name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ---- FASTAPI (Python) ----
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install FastAPI dependencies
        working-directory: ./WasteWatchAIFastApi
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run FastAPI tests
        working-directory: ./WasteWatchAIFastApi
        run: |
          if [ -f "test_main.py" ]; then
            echo "Running FastAPI tests..."
            pip install pytest pytest-asyncio httpx
            python test_main.py
          elif [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            echo "Running pytest..."
            pip install pytest pytest-asyncio httpx
            python -m pytest tests/ -v
          else
            echo "No test files found. Skipping FastAPI tests."
          fi

      # ---- NODE.JS (Mock API) ----
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Mock API dependencies
        working-directory: ./WasteWatchAIBackend/mock-api
        run: |
          if [ -f "package.json" ]; then
            npm install
          else
            echo "No package.json found in mock-api directory"
          fi

      # ---- .NET Core API ----
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Restore .NET dependencies
        working-directory: ./WasteWatchAIBackend
        run: dotnet restore
        
      - name: Build .NET API
        working-directory: ./WasteWatchAIBackend
        run: dotnet build --configuration Release --no-restore
        
      - name: Test .NET API
        working-directory: ./WasteWatchAIBackend
        run: |
          # Check for test projects in parent directory too
          if find ../WasteWatchAIBackend.Tests -name "*.csproj" 2>/dev/null | grep -q .; then
            echo "Found test project in WasteWatchAIBackend.Tests"
            cd ../WasteWatchAIBackend.Tests
            dotnet restore
            dotnet test --configuration Release
          elif find . -name "*.Tests.csproj" -o -name "*Test*.csproj" -o -name "*Tests*.csproj" | grep -q .; then
            dotnet test --configuration Release --no-build
          else
            echo "No test projects found. Skipping .NET tests."
          fi

      # ---- BLAZOR Frontend ----
      - name: Restore Blazor dependencies
        working-directory: ./WasteWatchAIFrontend
        run: dotnet restore
        
      - name: Build Blazor
        working-directory: ./WasteWatchAIFrontend
        run: dotnet build --configuration Release --no-restore

      # ---- DATABASE MIGRATIONS ----
      - name: Install Entity Framework tools
        run: dotnet tool install --global dotnet-ef
        
      - name: Generate migration script
        working-directory: ./WasteWatchAIBackend
        run: |
          echo "Generating SQL migration script..."
          dotnet ef migrations script --output migrations.sql --idempotent
          
      - name: Validate migrations
        working-directory: ./WasteWatchAIBackend
        run: |
          echo "Validating migration script..."
          if [ -f "migrations.sql" ]; then
            echo "Migration script generated successfully"
            echo "Script size: $(wc -c < migrations.sql) bytes"
          else
            echo "Error: Migration script not generated"
            exit 1
          fi

      # ---- DOCKER BUILDS ----
      - name: Build Docker images
        run: |
          echo "Building FastAPI container..."
          docker build -t wastewatchai-fastapi ./WasteWatchAIFastApi
          
          echo "Building .NET Backend container..."
          docker build -t wastewatchai-backend ./WasteWatchAIBackend
          
          echo "Checking for Mock API Dockerfile..."
          if [ -f "./WasteWatchAIBackend/mock-api/Dockerfile" ]; then
            echo "Building Mock API container..."
            docker build -t wastewatchai-mockapi ./WasteWatchAIBackend/mock-api
          else
            echo "No Dockerfile found for Mock API, skipping..."
          fi

      # ---- INTEGRATION TESTS ----
      - name: Integration tests
        run: |
          echo "Starting integration tests..."
          
          # Start mock API for testing if available
          if [ -f "./WasteWatchAIBackend/mock-api/package.json" ]; then
            echo "Starting Mock API..."
            cd ./WasteWatchAIBackend/mock-api
            npm start &
            MOCK_PID=$!
            echo "Mock API started with PID: $MOCK_PID"
            
            # Wait for service to start
            echo "Waiting for Mock API to start..."
            sleep 15
            
            # Test if Mock API is responding
            if curl -f http://localhost:8080/api/TrashItems/dummy >/dev/null 2>&1; then
              echo "Mock API is responding"
            else
              echo "Mock API not responding, continuing anyway..."
            fi
            
            # Run integration tests
            echo "Running FastAPI integration tests..."
            cd ../../WasteWatchAIFastApi
            python test_main.py || echo "Integration tests failed, but continuing..."
            
            # Cleanup
            echo "Stopping Mock API..."
            kill $MOCK_PID 2>/dev/null || true
          else
            echo "No Mock API found, skipping integration tests"
          fi

